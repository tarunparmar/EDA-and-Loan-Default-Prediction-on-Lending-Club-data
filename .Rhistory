accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Charged Off"]<-"Charged Off"
accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Fully Paid"]<-"Fully Paid"
# Chunk 4
library(stringr) # package to handle strings
# Rejected loans have loan application date. For accepted loans issue date is assumed as loan application date
accepted_loan_df$month=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,1] # Extract Month Ch
#data_accept$month=match(data_accept$month,month.abb) # Extract Month nu
accepted_loan_df$year=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,2] # Extract Year
library(lubridate) # package to handle dates
declined_loan_df$Application.Date <- ymd(declined_loan_df$Application.Date) # convert to date format
declined_loan_df$month=month(declined_loan_df$Application.Date,label=TRUE,abbr=TRUE) # Extract "Month" from date
declined_loan_df$year=year(declined_loan_df$Application.Date) # Extract "Year" from date
declined_loan_df$Application.Date<-NULL # Drop original date field
declined_loan_df$loan_status<-"Rejected" #create column for loan status - - Match column of accepted loan
# Chunk 5
library(tidyr)
dt1 <- accepted_loan_df %>%
group_by(loan_status) %>%
summarise(LoanAmount = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
dt1$loan_status[1] <- NA
dt1 <- dt1[complete.cases(dt1),]
# Chunk 6
plot_ly(dt1, labels = ~loan_status, values = ~LoanAmount, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Chunk 7
plot_ly(accepted_loan_df, x=~grade, y=~int_rate, type = "box")
# Chunk 8
library(scales)
dt2 <- accepted_loan_df %>%
group_by(year) %>%
summarise(TotalLoan = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
plot_ly(dt2,x=~year, y=~TotalLoan, text = dollar_format()(dt2$TotalLoan), type='bar')
# Chunk 1: setup
library(flexdashboard)
library(dplyr)
filepath <- paste(getwd(),"/Data/",sep = "")
declined_loan_df <- readRDS(paste(filepath,"declined_loan_data.Rds",sep = ""))
accepted_loan_df <- readRDS(paste(filepath,"accepted_loan_data.Rds",sep = ""))
# Chunk 2
accepted_loan_df %>% group_by(loan_status) %>% summarise(count = n())
# Chunk 3
accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Charged Off"]<-"Charged Off"
accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Fully Paid"]<-"Fully Paid"
# Chunk 4
library(stringr) # package to handle strings
# Rejected loans have loan application date. For accepted loans issue date is assumed as loan application date
accepted_loan_df$month=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,1] # Extract Month Ch
#data_accept$month=match(data_accept$month,month.abb) # Extract Month nu
accepted_loan_df$year=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,2] # Extract Year
library(lubridate) # package to handle dates
declined_loan_df$Application.Date <- ymd(declined_loan_df$Application.Date) # convert to date format
declined_loan_df$month=month(declined_loan_df$Application.Date,label=TRUE,abbr=TRUE) # Extract "Month" from date
declined_loan_df$year=year(declined_loan_df$Application.Date) # Extract "Year" from date
declined_loan_df$Application.Date<-NULL # Drop original date field
declined_loan_df$loan_status<-"Rejected" #create column for loan status - - Match column of accepted loan
# Chunk 5
library(tidyr)
dt1 <- accepted_loan_df %>%
group_by(loan_status) %>%
summarise(LoanAmount = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
dt1$loan_status[1] <- NA
dt1 <- dt1[complete.cases(dt1),]
# Chunk 6
plot_ly(dt1, labels = ~loan_status, values = ~LoanAmount, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Chunk 7
plot_ly(accepted_loan_df, x=~grade, y=~int_rate, type = "box")
# Chunk 8
library(scales)
dt2 <- accepted_loan_df %>%
group_by(year) %>%
summarise(TotalLoan = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
plot_ly(dt2,x=~year, y=~TotalLoan, text = dollar_format()(dt2$TotalLoan), type='bar')
filepath
declined_loan_df <- readRDS(paste(filepath,"declined_loan_data.Rds",sep = ""))
system('ls -l')
system('cd Data; ls -l')
# Chunk 1: setup
library(flexdashboard)
library(dplyr)
filepath <- paste(getwd(),"/Data/",sep = "")
declined_loan_df <- readRDS(paste(filepath,"declined_loan_data.Rds",sep = ""))
accepted_loan_df <- readRDS(paste(filepath,"accepted_loan_data.Rds",sep = ""))
# Chunk 2
accepted_loan_df %>% group_by(loan_status) %>% summarise(count = n())
# Chunk 3
accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Charged Off"]<-"Charged Off"
accepted_loan_df$loan_status[accepted_loan_df$loan_status=="Does not meet the credit policy. Status:Fully Paid"]<-"Fully Paid"
# Chunk 4
library(stringr) # package to handle strings
# Rejected loans have loan application date. For accepted loans issue date is assumed as loan application date
accepted_loan_df$month=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,1] # Extract Month Ch
#data_accept$month=match(data_accept$month,month.abb) # Extract Month nu
accepted_loan_df$year=str_split_fixed(accepted_loan_df$issue_d, "-", 2)[,2] # Extract Year
library(lubridate) # package to handle dates
declined_loan_df$Application.Date <- ymd(declined_loan_df$Application.Date) # convert to date format
declined_loan_df$month=month(declined_loan_df$Application.Date,label=TRUE,abbr=TRUE) # Extract "Month" from date
declined_loan_df$year=year(declined_loan_df$Application.Date) # Extract "Year" from date
declined_loan_df$Application.Date<-NULL # Drop original date field
declined_loan_df$loan_status<-"Rejected" #create column for loan status - - Match column of accepted loan
# Chunk 5
library(tidyr)
dt1 <- accepted_loan_df %>%
group_by(loan_status) %>%
summarise(LoanAmount = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
dt1$loan_status[1] <- NA
dt1 <- dt1[complete.cases(dt1),]
# Chunk 6
plot_ly(dt1, labels = ~loan_status, values = ~LoanAmount, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Chunk 7
plot_ly(accepted_loan_df, x=~grade, y=~int_rate, type = "box")
# Chunk 8
library(scales)
dt2 <- accepted_loan_df %>%
group_by(year) %>%
summarise(TotalLoan = sum(as.numeric(loan_amnt),na.rm = T),
NumberofLoans = n()) %>%
as.data.frame()
plot_ly(dt2,x=~year, y=~TotalLoan, text = dollar_format()(dt2$TotalLoan), type='bar')
save.image()
install.packages("pryr")
library(pryr)
mem_used()
accepted_loan_df %>%
group_by(grade) %>%
summarise(Count = n(), Median = median())
accepted_loan_df %>%
group_by(grade) %>%
summarise(Count = n(), Median = median(grade))
accepted_loan_df %>%
group_by(grade) %>%
summarise(Count = n()) %>%
plot_ly(.,x= ~grade, y = ~Count, color = ~grade, type = 'bar')
dt_2 <- accepted_loan_df %>%
group_by(grade) %>%
summarise(Count = n())
dt_2$grade[1] <- NA
dt_2 <- dt_2[complete.cases(dt_2),]
plot_ly(dt_2, x = ~grade, y = ~Count, color = ~grade, type = 'bar')
dt_2 <- accepted_loan_df %>%
group_by(grade, loan_status) %>%
summarise(Count = n())
dt_2$grade[1] <- NA
dt_2 <- dt_2[complete.cases(dt_2),]
plot_ly(dt_2, x = ~grade, y = ~Count, color = ~loan_status, type = 'bar')
dt_2 <- accepted_loan_df %>%
group_by(grade, loan_status) %>%
summarise(Count = n())
dt_2$grade[1] <- NA
dt_2 <- dt_2[complete.cases(dt_2),]
plot_ly(dt_2, x = ~grade, y = ~Count, color = ~loan_status, type = 'bar') %>%
layout(barmode = 'stack')
dt_3 <- accepted_loan_df %>%
group_by(purpose, loan_status) %>%
summarise(Count = n())
dt_3
dt_3$grade[1] <- NA
dt_3$purpose[1] <- NA
dt_3 <- dt_3[complete.cases(dt_3),]
plot_ly(dt_3, x = ~purpose, y = ~Count, color = ~loan_status, type = 'bar') %>%
layout(barmode = 'stack')
dt_3 <- accepted_loan_df %>%
group_by(purpose, loan_status) %>%
summarise(Count = n())
dt_3$purpose[1] <- NA
dt_3 <- dt_3[complete.cases(dt_3),]
plot_ly(dt_3, x = ~purpose, y = ~Count, color = ~loan_status, type = 'bar') %>%
layout(barmode = 'stack')
dt_3 <- accepted_loan_df %>%
group_by(purpose, loan_status) %>%
summarise(Count = n())
dt_3$purpose[1] <- NA
dt_3 <- dt_3[complete.cases(dt_3),]
plot_ly(dt_3, x = ~purpose, y = ~Count, color = ~loan_status, type = 'bar') %>%
layout(barmode = 'stack',
margin = list(b = 100))
plot_ly(accepted_loan_df, x = ~loan_status, y = ~loan_amnt, color = ~loan_status, type = 'box') %>% layout(margin = list(b = 100))
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(loan_amnt, na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
dt_4
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
plot_ly(dt_4, x = ~year, y = ~Amount, color = 'red', type = 'scatter', mode = 'lines')
plot_ly(dt_4, x = ~year, y = ~AvgAmount, color = 'red', type = 'scatter', mode = 'lines')
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
plot_ly(dt_4, x = ~year, y = ~AvgAm, color = 'red', type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount)
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
plot_ly(dt_4, x = ~year, y = ~Amount, color = 'red', type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount)
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
plot_ly(dt_4, x = ~year, type = 'scatter', mode = 'lines') %>%
add_trace(y = ~Amount, color = 'red') %>%
add_trace(y = ~AvgAmount, color = 'blue')
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
plot_ly(dt_4, x = ~year) %>%
add_trace(y = ~Amount, color = 'red', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~AvgAmount, color = 'blue', type = 'scatter', mode = 'lines')
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(a = 100))
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Average Amount"
)
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(a = 100))
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Average Amount"
)
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, name = "AvgAmount", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(a = 100))
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, name = "AvgAmount", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(x = 100))
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, name = "AvgAmount", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(b = 100))
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, name = "AvgAmount", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(a = 100))
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~AvgAmount, name = "AvgAmount", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay,
margin = list(a2 = 100))
dt_4 <- accepted_loan_df %>%
select(year, loan_amnt) %>%
na.omit(.) %>%
group_by(year) %>%
dplyr::summarize(Amount = sum(as.numeric(loan_amnt), na.rm = T), Volume = n(), AvgAmount = Amount/Volume)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Volume"
)
plot_ly(dt_4, x = ~year) %>%
add_lines(y = ~Amount, name = "Amount", type = 'scatter', mode = 'lines') %>%
add_lines(y = ~Volume, name = "Volume", type = 'scatter', mode = 'lines', yaxis = 'y2') %>%
layout(yaxis2 = ay)
accepted_loan_df %>%
select(loandf, addr_state) %>%
na.omit() %>%
group_by(addr_state) %>%
dplyr::summarise(value = n())
names(accepted_loan_df)
names(accepted_loan_df$addr_state)
levels(factor(accepted_loan_df$addr_state))
?one_of
accepted_loan_df %>%
select(accepted_loan_df, addr_state) %>%
na.omit() %>%
group_by(addr_state) %>%
dplyr::summarise(value = n())
accepted_loan_df %>%
select(loan_amnt, addr_state) %>%
na.omit() %>%
group_by(addr_state) %>%
dplyr::summarise(value = sum(as.numeric(loan_amnt), na.rm = TRUE))
df <- accepted_loan_df %>%
select(loan_amnt, addr_state) %>%
na.omit() %>%
group_by(addr_state) %>%
dplyr::summarise(value = sum(as.numeric(loan_amnt), na.rm = TRUE))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
f <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
head(f)
head(accepted_loan_df)
head(df)
df$hover <- with(accepted_loan_df, paste(state, '<br>', "TotalLoanAmount", TotalLoanAmount))
df$hover <- with(accepted_loan_df, paste(addr_state, '<br>', "TotalLoanAmount", TotalLoanAmount))
df <- accepted_loan_df %>%
select(loan_amnt, addr_state) %>%
na.omit() %>%
group_by(addr_state) %>%
dplyr::summarise(TotalLoanAmount = sum(as.numeric(loan_amnt), na.rm = TRUE))
df$hover <- with(df, paste(addr_state, '<br>', "TotalLoanAmount", TotalLoanAmount))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~TotalLoanAmount, text = ~hover, locations = ~code,
color = ~TotalLoanAmount, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
head(f)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~TotalLoanAmount, text = ~hover, locations = ~addr_state,
color = ~TotalLoanAmount, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~dollar_format()(TotalLoanAmount), text = ~hover, locations = ~addr_state,
color = ~TotalLoanAmount, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
df$hover <- with(df, paste(addr_state, '<br>', "TotalLoanAmount", dollar_format()(TotalLoanAmount)))
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~TotalLoanAmount, text = ~hover, locations = ~addr_state,
color = ~TotalLoanAmount, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~TotalLoanAmount, text = ~hover, locations = ~addr_state,
color = ~TotalLoanAmount, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = 'Lending Club Loans by State<br>(Hover for breakdown)',
geo = g
)
p
install.packages("highcharter")
install.packages("highcharter")
library(highcharter)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hctreemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
install.packages("arules")
data("Groceries", package = "arules")
options(download.file.method = "wget")
data("Groceries", package = "arules")
install.packages("arules")
options(download.file.method = "curl")
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
install.packages("installr")
options(download.file.method = "wget")
install.packages("installr")
options(download.file.method = "curl")
